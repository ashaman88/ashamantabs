program AshamanTabs;
  {$Define SMART}
  {$I SRL-6/SRL.Simba}

{

AshamanTabs v2.1
-Make sure you are standing in front of your lectern and next to the butler (talk to him)
-Make sure you have noted clay in inventory
-If using a staff, have it already equipped
-Have any other necessary runes in inventory
-Don't wear white or red clothing
-Fill out tabtype exactly the same as the examples!!
-If you want an accurate xp calc, set the xp bar tracker to total or mage xp and it can't say 'lots'
}

///////////////////////////////////////////////////////////////////////
//                                                                   //
//                  Begin of user setup                              //
//                Fill in the fields below                           //
//                                                                   //
///////////////////////////////////////////////////////////////////////

const
  demonButler = true;  // ***Set to true if you are using the demon butler (False if you are using regular butler)***
  tabSlot     = 1;    // ***What slot in the production screen is the tab you're making in?***
                       //    (slots go 1-4 row 1, 5-8 row 2, etc. etc.)
  timetoRun   = 8.0;   // ***Enter number of hours to run or until client token error***
  slot        = 1;     // ***What slot is your noted softclay at?***


//////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                  //
//                                                                                                  //
//               Don't touch below this line unless you know what you're doing!!                    //
//                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////



procedure declarePlayers;
begin
  setLength(players, 1);

  //***If NOT using the player manager, fill out the loginname and password below, otherwise ignore those two***
  with players[0] do
  begin
    loginName := '';      {Remove the "//" from this line if you arent using player manager}
    password := '';       {Remove the "//" from this line if you arent using player manager}
    isActive := true;
  end;
  currentPlayer := 0;
end;

const
  scriptVersion = '2.1';
  debug = false;

var
  tabCount, XP, startingExperience: integer;
  lecternBox: TBox;
  timeout, runTimer: TTimeMarker;
  notedClayDTM, clayDTM, lawDTM, color, tolerance, count, natureDTM, runTime, XDTM: integer;
  tabsPH, XPH, hue, sat: Extended;

{*******************************************************************************
Function AutoupdateMe;
By: Shuttleu
Edited By: Ashaman88
Description: Autoupdates Script.
*******************************************************************************}
Procedure AutoUpdateMe;
Var
  Neifile: Integer;
  OnlineVersion, NewScript, NeiFeilNennen: String;
Begin
  Writeln('Checking for script updates...');
  OnlineVersion := GetPage('http://ashamantabs.googlecode.com/git/Version.txt');
  Writeln('Online Version: '+ToStr(OnlineVersion));
  Writeln('Local Version: '+ToStr(ScriptVersion));
  If (trim(OnlineVersion) > ScriptVersion) Then
  Begin
    WriteLn('Newer script version online!');
    WriteLn('Autoupdating to newer version.');
    NewScript := GetPage('http://ashamantabs.googlecode.com/git/AshamanTabs.simba');
    NeiFeilNennen := ScriptPath+ 'AshamanTabs V'+OnlineVersion+'.simba';
    Neifile := Rewritefile(NeiFeilNennen, true);
    Try
      WriteFileString(Neifile, NewScript);
    Except
      Begin
        WriteLn('Fatal error writing to '+NeiFeilNennen+'!!');
        Terminatescript;
      End;
    End;
    CloseFile(Neifile);
    WriteLn('New script downloaded to '+NeiFeilNennen+'!! Please use this one!!');
    TerminateScript;
  End Else
    WriteLn('You have the latest version of the script!');
End;

procedure setDTM;
begin
  notedClayDTM := DTMFromString('mQwAAAHicY2ZgYMhiYmAoAeIUIH4C5L8F4jdAHGLLw7B6dhHDnN4MBn4gH4YZkTAQAABS9Qgf');
  clayDTM := DTMFromString('mggAAAHicY2NgYGBlQABOIBYEYnYoZgFiHiDmQ1IXYsvD4GvBzRDvyssQ4cDDYKPNwWCny8nABZTDhhlxYAgAABXfA/4=');
  lawDTM := DTMFromString('mWAAAAHicY2FgYHBkYmBwB2IbIPYC4hdAsSdA/JgBwpZXvgbHtRUVDPxAMWTMiIZBAAAL6Qmn');
  natureDTM := DTMFromString('mlwAAAHicY2dgYOAAYj4gZgNiLigGAUEgZoSy2ZHUgdicQFxWWMggUCEMx7GRkQyRoaEMVaUlDPxAeVyYEQ+GAgBNvQeF');
  xDTM := DTMFromString('mggAAAHicY2NgYDBlgmALIDYBYn0oTgHKJQBxKhBnAnEGA0RMSVaMITXaA44L0wIZGopiGFiBctgwIw4MAQD0zgms');
end;

Procedure fr33DTM;
begin
  freeDTM(clayDTM);
  freeDTM(notedClayDTM);
  freeDTM(lawDTM);
  freeDTM(natureDTM);
  freeDTM(xDTM);
end;

function TRSChatBox.getXP: Integer;
var
  b: TBox;
  s: String;
  tpa : TPointArray;
  atpa : T2DPointArray;
  i,cts,p: Integer;
begin
  b := self.getBounds();
  b.edit(+(b.x2-b.x1)-140, +10, -5, -94);

  findColorsTolerance(tpa, 14013909, b, 4,colorSetting(2, 0.00, 0.00));

  if length(tpa) < 2 then
  begin
    print('chatBox.getXP(): No XP found', TDebug.SUB);
    Exit;
  end;

  atpa := tpa.cluster(5);

  b:= atpa.getbounds;
  b.edit(-2,-2,+2,+3);

  s:=Replace(tesseractgettext(b.x1,b.y1,b.x2,b.y2, FILTER_SMALL_CHARS), ' ', '', [rfReplaceAll]);

  P := Pos('x', S);
  if P > 0 then
    Result := StrToIntDef(ExtractFromStr(Copy(s, P, Length(S)), Numbers), 0)
  else
    Result := StrToIntDef(ExtractFromStr(S, Numbers), 0);

  print('chatBox.getXP(): XP found: ' + tostr(result), TDebug.SUB);
end;

Procedure QuickBoxSort(var A: TIntegerArray; var B: TBoxArray; iLo, iHi: Integer; SortUp: Boolean);
Var
  Lo, Hi, Mid, T: Integer;
  TP: TBox;
Begin
  If (Length(A) <> Length(B)) Then
    Exit;
  Lo := iLo;
  Hi := iHi;
  Mid := A[(Lo + Hi) shr 1];
  Repeat
    If SortUp Then
    Begin
      While (A[Lo] < Mid) Do Inc(Lo);
      While (A[Hi] > Mid) Do Dec(Hi);
    End Else
    Begin
      While (A[Lo] > Mid) Do Inc(Lo);
      While (A[Hi] < Mid) Do Dec(Hi);
    End;
    If (Lo <= Hi) Then
    Begin
      T := A[Lo];
      A[Lo] := A[Hi];
      A[Hi] := T;
      TP := B[Lo];
      B[Lo] := B[Hi];
      B[Hi] := TP;
      Inc(Lo);
      Dec(Hi);
    End;
  Until Lo > Hi;
  If (Hi > iLo) Then QuickBoxSort(A, B, iLo, Hi, SortUp);
  If (Lo < iHi) Then QuickBoxSort(A, B, Lo, iHi, SortUp);
End;


{*
  Sorts A TBoxArray by Mid-Point. Closest OverallBox by Midpoint to the From-Point First.
*}
Procedure MidSortBoxArrayFrom(Var BoxArray: TBoxArray; Const From: TPoint);
Var
   I,L: Integer;
   Mid: TPoint;
   DistArr: TIntegerArray;
Begin
  L := High(BoxArray);
  If (L < 0) Then
    Exit;
  SetLength(DistArr, L + 1);

  For I := 0 To L Do
  Begin
    Mid := MiddleBox(BoxArray[I]);
    DistArr[I] := Round(Sqr(From.X - Mid.X) + Sqr(From.Y - Mid.Y));
  End;

  QuickBoxSort(DistArr,BoxArray,0,l,True);
End;

function findNormalRandoms: boolean;
begin
  result := exitTreasure or claimTicket;
end;

Function Antiban: Boolean;
Var
  I: Integer;
Begin
  I := Random(600);
  Case I Of
    1..3:
      Begin
        Wait(RandomRange(1000, 1500));
        Result := True;
      End;
    4..7:
      Begin
        hoverSkill(SKILL_MAGIC);
        TabBackpack.Open;
        Result := True;
      End;
    8..11:
      Begin
        mousemovingobject;
        Result := True;
      End;
    12..200:
      Begin
        SleepAndMoveMouse(RandomRange(100,5000));
        Result:=True;
      End;
    201..400:
      Begin
        Wait(RandomRange(250, 1500));
        MouseOffClient(4);
        Wait(RandomRange(3000, 6000));
        Result:=True;
      End;
    401..600:
      Begin
        Wait(RandomRange(250, 1500));
        Result:=True;
      End;
  End;
  Wait(RandomRange(1250, 3350));
End;

Procedure TypeFast(Text: String; PressEnter: Boolean);
Var
  I: Integer;
Begin
  For I:=1 to Length(Text) Do
    {$IFDEF SIMBAMAJOR980}
    SendKeys(Text[I], 10 + Random(2));
    {$ELSE}
    SendKeys(Text[I], 10 + Random(2), 10 + Random(2));
    {$ENDIF}

  If (PressEnter) Then
    TypeByte(VK_ENTER);
End;

Procedure FailSafe;
Var
  T: TTimeMarker;
Begin
  If Debug Then
    Writeln('MISCLICKED, DOING FAILSAFE');
  Mouse(Point(289+GaussRangeInt(-10,10),203+GaussRangeInt(-10,10)),Mouse_Left,Mouse_Human);

  Wait(RandomRange(400,500));

  T.Start;
  Repeat
    Wait(100);
    If T.GetTime>5000 Then
      Exit;
  Until (Not(Minimap.IsPlayerMoving));
End;

Function FindButler: Boolean;
Var
  X,Y,H,I,CTS,XC,YC: Integer;
  T: TTimeMarker;
  TPA: TPointArray;
  ATPA: T2DPointArray;
Label
  Jump;
Begin
  Result := False;

  If Not IsLoggedIn Then
    Exit;

  If (ChooseOption.OptionsExist(['Exam','mine','Examine','Canc','ncel','Cancel'])) Then
  Begin
    If Debug Then
      Writeln('Closing options menu');
    MouseOffClient(4);
  End;

  findColorsTolerance(tpa, Color, LecternBox, Tolerance, colorSetting(2, Hue,Sat));

  ATPA:= TPA.Cluster(10);
  atpa.filterBetween(0,15);

  If (Length(ATPA) = 0) Then
  Begin
    If Debug Then
      Writeln('No butler found.');
    Exit;
  End;

  ATPA.SortBySize;
  SmartImage.DebugATPA(ATPA);

  H := High(ATPA);

  For I:= 0 To Min(H,4) Do
  Begin
    If Debug Then
      Writeln(Length(ATPA[i]));
    Jump:

    If Debug Then
      Writeln('Using notes on butler');
    If Not TabBackpack.IsSlotActivated(Slot) Then
    Begin
      If (Not FindDTM(NotedClayDTM,XC,YC,TabBackpack.GetBounds)) Then
      Begin
        If Debug Then
          Writeln('No Clay found');
        Exit;
      End;

      Mouse(XC,YC,GaussRangeInt(-5,5),GaussRangeInt(-5,5));
      FastClick(Mouse_Left);
    End;

    MiddleTPAEx(ATPA[I],X,Y);
    Mouse(X,Y,GaussRangeInt(-5,5),GaussRangeInt(-5,5));

    If (IsMouseOverText(['utle','tler','Butl'],300)) Then
    Begin
      SMARTImage.Clear;
      If Debug Then
        Writeln('Found Butler, Clicking.');

      FastClick(Mouse_Right);

      If ChooseOption.Select(['> D','> B','tler','utle'],RandomRange(700,900)) Then
      Begin
        T.Start;
        Repeat
          If CountColor(618917,ConversationBox.GetBounds)=0 Then
            Break;
          If T.GetTime>4000 Then
          Begin
            If Debug Then
              Writeln('Orange highlight color for paying butler didnt go away');
            Exit;
          End;
        Until Not IsLoggedIn;

        T.Reset;
        T.Start;
        Repeat
          Wait(Random(800));
          If T.GetTime > 8000 Then
          Begin
            If Debug Then
              Writeln('Didnt find butler chat option timeout');
            Exit;
          End;
        Until (ConversationBox.SelectOption(['soft'])) Or (ConversationBox.Continue(True,False, false));

        If (ConversationBox.Continue(True,False, false)) Then
        Begin
          If Debug Then
            Writeln('Paying butler');

          ConversationBox.Continue(True,True);
          TypeFast('1',False);

          T.Reset;
          T.Start;
          Repeat
            If CountColor(618917,ConversationBox.GetBounds)>0 Then
              Break;
            If T.GetTime>4000 Then
            Begin
              If Debug Then
                Writeln('Didnt find orange highlight color for paying butler');
              Exit;
            End;
          Until Not IsLoggedIn;

          If Debug Then
            Writeln('Re-clicking butler');

          GoTo Jump;
        End;

        If Debug Then
          Writeln('Sending for more logs.');

        Result:=True;

        T.Reset;
        T.Start;
        Repeat
          If CountColor(618917,ConversationBox.GetBounds)>0 Then
            Break;
          If T.GetTime>4000 Then
          Begin
            If Debug Then
              Writeln('Didnt find orange highlight color for getting logs');
            Exit;
          End;
        Until Not IsLoggedIn;

        Wait(RandomRange(1000,2000));
      End;
    End;
  End;
End;

Function FindLectern:Boolean;
Var
  H,I,CTS,X,Y: Integer;
  B: TBox;
  TBA: TBoxArray;
  MBP: TPoint;
  TPA: TPointArray;
  ATPA: T2DPointArray;
Begin
  Result := False;

  If Not IsLoggedIn Then
    Exit;

  If ChatBox.FindTextOnLines(['cannot'],[0]) Then
  Begin
    Writeln('You cant make that tablet on this lectern, terminating script');
    TerminateScript;
  End;

  If Timeout.GetTime>300000 Then
  Begin
    Writeln('Nothing has happened for too long, shutting down.');
    TerminateScript;
  End;

  If productionscreen.isopen(Random(100)) Then
  Begin
    Wait(Random(800));
    Result:=True;
    Exit;
  End;

  If Debug Then
    Writeln('Looking for lectern');

  If (Not FindDTM(LawDTM,X,Y,TabBackpack.GetBounds)) And (Not FindDTM(NatureDTM,X,Y,TabBackpack.GetBounds)) Then
  Begin
    Writeln('Out of runes');
    TerminateScript;
  End;

  If Not FindDTM(ClayDTM,X,Y,TabBackpack.GetBounds) Then
  Begin
    If Debug Then
      Writeln('Low on clay, sending for more');
    If WaitFunc(@FindButler,10,RandomRange(7000,9000)) Then
      TabBackpack.WaitForShift(20000);
  End;

  findColorsTolerance(tpa, 1025491, LecternBox, 10,colorSetting(2,0.03,1.16)); //gold

  If (Length(TPA) < 1) Then
    Exit;

  ATPA:= TPA.Cluster(10);
  atpa.filterBetween(0,5);

  SetLength(TPA,0);

  If (Length(ATPA) = 0) Then
  Begin
    If Debug Then
      Writeln('No lecturn colors found');
    Exit;
  End;

  H := High(ATPA);

  For I := 0 To H Do
  Begin
    If Debug Then
      Writeln(Length(ATPA[I]));

    If (Length(ATPA[I]) < 80) Then
    Begin
      B := GetTPABounds(ATPA[I]);
      B.Edit(-10,-10,+10,+10);

      With B Do
      Begin

        findColorsTolerance(tpa, 10134180, LecternBox, 17,colorSetting(2, 0.09,0.18));

        If (Length(TPA) > 10) Then
        Begin
          If Debug Then
            Writeln('Inner Length: '+ToStr(Length(TPA)));

          B.Edit(+12,+10,-10,-10);
          B.SetLimit(Mainscreen.GetBounds);

          SetArrayLength(TBA, Length(TBA)+1);
          TBA[High(TBA)] := B;
        End;
        SetLength(TPA,0);
      End;
    End;
  End;

  SetLength(ATPA,0);

  SmartImage.DrawBoxes(TBA,False,clRed);

  MidSortBoxArrayFrom(TBA,Mainscreen.PlayerPoint);

  For H := 0 To High(TBA) Do
  Begin
    MBP := MiddleBox(TBA[H]);
    Mouse(MBP.X, MBP.Y,GaussRangeInt(-5,5),GaussRangeInt(-5,5));

    If (IsMouseOverText(['udy','tern','Lec','tudy'],RandomRange(200,300))) Then
    Begin
      SMARTImage.Clear;
      If Debug Then
        Writeln('Found lectern, clicking');

      If DidClick(False) Then
      Begin
        FailSafe;
        SetLength(TBA,0);
        Exit;
      End Else
      Begin
        If productionscreen.isopen(10000) Then
        Begin
          Wait(Random(200));
          SetLength(TBA,0);
          Result := True;
          Exit;
        End;
      End;
    End;
  End;
  SetLength(TBA,0);
End;

Procedure ProgressReport;
Begin
  SMARTImage.Clear;
  If Not Debug Then
    ClearDebug;

  XP := Round((ChatBox.GetXP - StartingExperience));
  XPH := Round(XP * (3600.0 / (GetTimeRunning / 1000.0)));
  TabsPH := Round((TabCount * (3600.0 / (GetTimeRunning / 1000.0))));

  Writeln('========AshamanTabs V'+ScriptVersion+'=========');
  Writeln('Time Running: ' + TimeRunning);
  Writeln('Tabs Made: ' + IntToStr(TabCount));
  Writeln('Tabs/H: ' + ToStr(TabsPH));
  Writeln('Experience Earned: ' + IntToStr(XP));
  Writeln('Experience/Hour: ' + ToStr(XPH));
  Writeln('=================================');

  Timeout.Reset;
  Timeout.Start;
End;

Procedure Waiting;
Var
  Inv1: Integer;
  T: TTimeMarker;
Begin
  T.Start;
  Inv1:=TabBackpack.Count;
  IncEx(TabCount,TabBackpack.CountDTM(ClayDTM));
  Repeat
    Wait(Random(800));
    If Inv1>TabBackpack.Count Then
    Begin
      T.Reset;
      T.Start;
    End;
    If T.GetTime > 15000 Then
    Begin
      ProgressReport;
      Exit;
    End;
    If FindNormalRandoms Then
    Begin
      Writeln('Found a random, terminating script');
      Exit;
    End;
    AntiBan;
  Until (TabBackpack.CountDTM(ClayDTM)=0);
  ProgressReport;
End;

Function FindTab:Boolean;
Begin
  Result := False;

  If Not IsLoggedIn Then
    Exit;

  If Not Productionscreen.isopen(10000) Then
    Exit;

  If Debug Then
    Writeln('Moving mouse to tab icon');

  Wait(Random(200));

  If Debug Then
    Writeln('Clicking on icon');

  If productionscreen.selectBox(tabSlot) Then
    if productionscreen.clickstart then
      If TabBackpack.WaitForShift(8000) Then
        Waiting;
End;

Procedure MainLoop;
Begin
  FindNormalRandoms;
  If FindLectern Then
    FindTab;
  Wait(Random(800));
End;

procedure setup;
begin
  clearDebug;
  autoUpdateMe;
  smartEnableDrawing := true;

  setupSRL;

  declarePlayers;

  addOnTerminate('Fr33DTM');
  setDTM;

  if (not isLoggedIn) then
  begin
    writeln('Please log in and setup the position as needed');
    terminateScript;
  end;

  if not debug then
    disableSRLDebug := true else
    disableSRLDebug := false;

  clearDebug;

  minimap.clickCompass;
  mainScreen.setAngle(MS_ANGLE_HIGH);

  startingExperience := chatBox.getXP;
  timeout.start;
  runTimer.start;
  runTime := round(timetoRun * 60 * 60 * 1000 + random(300000));
  writeln('You are going to run for ' + msToTime(runTime, time_Formal));

  lecternBox := mainscreen.playerBox;
  lecternBox.edit(-20, -25, 20, 25);

  if demonButler then
  begin
    count := 26;
    color := 1580857;
    tolerance := 12;
    hue := 0.30;
    sat := 1.21;
    writeln('You are using the Demon Butler');
  end else
  begin
    count := 20;
    color := 1055559;
    tolerance := 10;
    hue := 0.32;
    sat := 1.30;
    writeln('You are using the Normal Butler');
  end;
end;

begin
  setup;
  repeat
    mainloop;
  until (runTime < runTimer.getTime) or (not isLoggedIn);
end.
